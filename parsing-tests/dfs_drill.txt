/**
    This code is absolutely hideous but it works.
    Rover does dfs to scan and mine all d nodes specified and
    goes to recharge when there is still a digit node
    available and it runs out of power.
**/


{
    /** Initialize stuff globally **/
    // Hard code important tile positions:
    // Map is [row][col] so we go [y][x] order here
    int [ 12 ] [ 2 ] d_tiles ;  // array of 2d vector [y, x] with each d tile on map
    int [ 2 ] [ 2 ] charge_tiles ;  // array of 2d vector [y, x] with each digit tile on map
    bool continue ;
    int times_charged ;
    bool must_charge ;
    int i ;

    int ROWS ; int COLS ;
    ROWS = 7 ; COLS = 31 ;

    // Initialize the arrays:
        d_tiles [ 0 ] [ 0 ] = 3 ;
        d_tiles [ 0 ] [ 1 ] = 1 ;
        d_tiles [ 1 ] [ 0 ] = 8 ;
        d_tiles [ 1 ] [ 1 ] = 1 ;
        d_tiles [ 2 ] [ 0 ] = 25 ;
        d_tiles [ 2 ] [ 1 ] = 1 ;
        d_tiles [ 3 ] [ 0 ] = 1 ;
        d_tiles [ 3 ] [ 1 ] = 2 ;
        d_tiles [ 4 ] [ 0 ] = 18 ;
        d_tiles [ 4 ] [ 1 ] = 2 ;
        d_tiles [ 5 ] [ 0 ] = 25 ;
        d_tiles [ 5 ] [ 1 ] = 3 ;
        d_tiles [ 6 ] [ 0 ] = 5 ;
        d_tiles [ 6 ] [ 1 ] = 5 ;
        d_tiles [ 7 ] [ 0 ] = 15 ;
        d_tiles [ 7 ] [ 1 ] = 3 ;
        d_tiles [ 8 ] [ 0 ] = 26 ;
        d_tiles [ 8 ] [ 1 ] = 1 ;
        d_tiles [ 9 ] [ 0 ] = 27 ;
        d_tiles [ 9 ] [ 1 ] = 1 ;
        d_tiles [ 10 ] [ 0 ] = 27 ;
        d_tiles [ 10 ] [ 1 ] = 2 ;
        d_tiles [ 11 ] [ 0 ] = 28 ;
        d_tiles [ 11 ] [ 1 ] = 2 ;
        charge_tiles [ 0 ] [ 0 ] = 5 ;
        charge_tiles [ 0 ] [ 1 ] = 4 ;
        charge_tiles [ 1 ] [ 0 ] = 21 ;
        charge_tiles [ 1 ] [ 1 ] = 5 ;

    // Open the correct map
    rover . change_map "dfs_drill_map.txt" ;
    must_charge = false ;
    continue = false ;
    i = 0 ;
    times_charged = 0 ;
    while ( ! continue ) {
        {
            // 31 *  7 = 217
            int [ 217 ] PATH ; int PATH_PTR ;  // use as a stack of directions taken
            int [ 217 ] [ 2 ] TOGO ; int TOGO_PTR ;  // stack for which neighbors are calculated per node
            int [ 217 ] [ 2 ] VISITED ; int VISITED_PTR ;  // array of 2d vectors [x, y]
            int [ 2 ] current ;

            // Init pointers and start position
            PATH_PTR = 0 ;
            TOGO_PTR = 0 ;
            VISITED_PTR = 0 ;
            current [ 0 ] = rover . x_pos ; current [ 1 ] = rover . y_pos ;

            // Visit first node
            VISITED [ VISITED_PTR ] [ 0 ] = current [ 0 ] ;
            VISITED [ VISITED_PTR ] [ 1 ] = current [ 1 ] ;
            VISITED_PTR = VISITED_PTR + 1 ;

            if ( rover . can_move up ) {
                TOGO [ TOGO_PTR ] [ 0 ] = current [ 0 ] ;
                TOGO [ TOGO_PTR ] [ 1 ] = current [ 1 ] - 1 ;
                TOGO_PTR = TOGO_PTR + 1 ;
            }
            if ( rover . can_move right ) {
                TOGO [ TOGO_PTR ] [ 0 ] = current [ 0 ] + 1 ;
                TOGO [ TOGO_PTR ] [ 1 ] = current [ 1 ] ;
                TOGO_PTR = TOGO_PTR + 1 ;
            }
            if ( rover . can_move down ) {
                TOGO [ TOGO_PTR ] [ 0 ] = current [ 0 ] ;
                TOGO [ TOGO_PTR ] [ 1 ] = current [ 1 ] + 1 ;
                TOGO_PTR = TOGO_PTR + 1 ;
            }
            if ( rover . can_move left ) {
                TOGO [ TOGO_PTR ] [ 0 ] = current [ 0 ] - 1 ;
                TOGO [ TOGO_PTR ] [ 1 ] = current [ 1 ] ;
                TOGO_PTR = TOGO_PTR + 1 ;
            }

            print "FIRST: " ;
            print rover . x_pos ; print rover . y_pos ;
            rover . print_map ;
            print "" ;

            {
                int [ 2 ] goal ;
                int [ 2 ] next ;
                bool break ;
                int going ;
                break = false ;
                goal [ 0 ] = d_tiles [ i ] [ 0 ] ;
                goal [ 1 ] = d_tiles [ i ] [ 1 ] ;
                if ( must_charge ) {
                    goal [ 0 ] = charge_tiles [ times_charged ] [ 0 ] ;
                    goal [ 1 ] = charge_tiles [ times_charged ] [ 1 ] ;
                }
                next [ 0 ] = TOGO [ TOGO_PTR - 1 ] [ 0 ] ;  // Pop
                next [ 1 ] = TOGO [ TOGO_PTR - 1 ] [ 1 ] ;  // Pop
                TOGO_PTR = TOGO_PTR - 1 ;  // Decrement stack pointer

                // Start dfs
                while ( ! break ) {
                    bool vis_up ; bool vis_right ; bool vis_down ; bool vis_left ;
                    bool moved ;
                    int going ;
                    int i ; i = 0 ;
                    vis_up = false ; vis_right = false ; vis_down = false ; vis_left = false ;
                    moved = false ;

                    // Check which neighbors are visited
                    while ( i < VISITED_PTR ) {
                        if ( VISITED [ i ] [ 0 ] == current [ 0 ] && VISITED [ i ] [ 1 ] == current [ 1 ] - 1 )
                            vis_up = true ;
                        if ( VISITED [ i ] [ 0 ] == current [ 0 ] && VISITED [ i ] [ 1 ] == current [ 1 ] + 1 )
                            vis_down = true ;
                        if ( VISITED [ i ] [ 0 ] == current [ 0 ] - 1 && VISITED [ i ] [ 1 ] == current [ 1 ] )
                            vis_left = true ;
                        if ( VISITED [ i ] [ 0 ] == current [ 0 ] + 1 && VISITED [ i ] [ 1 ] == current [ 1 ] )
                            vis_right = true ;
                        i = i + 1 ;
                    }

                    // Check where we are going next
                    if ( next [ 0 ] == current [ 0 ] && next [ 1 ] == current [ 1 ] - 1 )
                        going = 0 ;  // Up
                    else if ( next [ 0 ] == current [ 0 ] && next [ 1 ] == current [ 1 ] + 1 )
                        going = 2 ;  // Down
                    else if ( next [ 0 ] == current [ 0 ] - 1 && next [ 1 ] == current [ 1 ] )
                        going = 3 ;  // Left
                    else if ( next [ 0 ] == current [ 0 ] + 1 && next [ 1 ] == current [ 1 ] )
                        going = 1 ; // Right
                    else going = - 1 ;  // Need backtrack

                    if ( going == 0 && ! vis_up ) {
                        print "Going up" ;
                        rover . move up 1 ;
                        current [ 0 ] = rover . x_pos ; current [ 1 ] = rover . y_pos ;
                        VISITED [ VISITED_PTR ] [ 0 ] = current [ 0 ] ;
                        VISITED [ VISITED_PTR ] [ 1 ] = current [ 1 ] ;
                        VISITED_PTR = VISITED_PTR + 1 ;
                        PATH [ PATH_PTR ] = 0 ;
                        PATH_PTR = PATH_PTR + 1 ;
                        moved = true ;
                        rover . print_map ;
                    } else if ( going == 1 && ! vis_right ) {
                        print "Going right" ;
                        rover . move right 1 ;
                        current [ 0 ] = rover . x_pos ; current [ 1 ] = rover . y_pos ;
                        VISITED [ VISITED_PTR ] [ 0 ] = current [ 0 ] ;
                        VISITED [ VISITED_PTR ] [ 1 ] = current [ 1 ] ;
                        VISITED_PTR = VISITED_PTR + 1 ;
                        PATH [ PATH_PTR ] = 1 ;
                        PATH_PTR = PATH_PTR + 1 ;
                        moved = true ;
                        rover . print_map ;
                    } else if ( going == 2 && ! vis_down ) {
                        print "Going down" ;
                        rover . move down 1 ;
                        current [ 0 ] = rover . x_pos ; current [ 1 ] = rover . y_pos ;
                        VISITED [ VISITED_PTR ] [ 0 ] = current [ 0 ] ;
                        VISITED [ VISITED_PTR ] [ 1 ] = current [ 1 ] ;
                        VISITED_PTR = VISITED_PTR + 2 ;
                        PATH [ PATH_PTR ] = 2 ;
                        PATH_PTR = PATH_PTR + 1 ;
                        moved = true ;
                        rover . print_map ;
                    } else if ( going == 3 && ! vis_left ) {
                        print "Going left" ;
                        rover . move left 1 ;
                        current [ 0 ] = rover . x_pos ; current [ 1 ] = rover . y_pos ;
                        VISITED [ VISITED_PTR ] [ 0 ] = current [ 0 ] ;
                        VISITED [ VISITED_PTR ] [ 1 ] = current [ 1 ] ;
                        VISITED_PTR = VISITED_PTR + 3 ;
                        PATH [ PATH_PTR ] = 3 ;
                        PATH_PTR = PATH_PTR + 1 ;
                        moved = true ;
                        rover . print_map ;
                    }

                    if ( moved ) {
                        // Check which neighbors are visited
                        bool vis_up ; bool vis_right ; bool vis_down ; bool vis_left ;
                        int i ; i = 0 ;
                        vis_up = false ; vis_right = false ; vis_down = false ; vis_left = false ;
                        while ( i < VISITED_PTR ) {
                            if ( VISITED [ i ] [ 0 ] == current [ 0 ] && VISITED [ i ] [ 1 ] == current [ 1 ] - 1 )
                                vis_up = true ;
                            if ( VISITED [ i ] [ 0 ] == current [ 0 ] && VISITED [ i ] [ 1 ] == current [ 1 ] + 1 )
                                vis_down = true ;
                            if ( VISITED [ i ] [ 0 ] == current [ 0 ] - 1 && VISITED [ i ] [ 1 ] == current [ 1 ] )
                                vis_left = true ;
                            if ( VISITED [ i ] [ 0 ] == current [ 0 ] + 1 && VISITED [ i ] [ 1 ] == current [ 1 ] )
                                vis_right = true ;
                            i = i + 1 ;
                        }
                        // Push non visited neighbors in TOGO stack
                        if ( ! vis_up && rover . can_move up ) {
                            TOGO [ TOGO_PTR ] [ 0 ] = current [ 0 ] ;
                            TOGO [ TOGO_PTR ] [ 1 ] = current [ 1 ] - 1 ;
                            TOGO_PTR = TOGO_PTR + 1 ;
                        }
                        if ( ! vis_down && rover . can_move down ) {
                            TOGO [ TOGO_PTR ] [ 0 ] = current [ 0 ] ;
                            TOGO [ TOGO_PTR ] [ 1 ] = current [ 1 ] + 1 ;
                            TOGO_PTR = TOGO_PTR + 1 ;
                        }
                        if ( ! vis_left && rover . can_move left ) {
                            TOGO [ TOGO_PTR ] [ 0 ] = current [ 0 ] - 1 ;
                            TOGO [ TOGO_PTR ] [ 1 ] = current [ 1 ] ;
                            TOGO_PTR = TOGO_PTR + 1 ;
                        }
                        if ( ! vis_right && rover . can_move right ) {
                            TOGO [ TOGO_PTR ] [ 0 ] = current [ 0 ] + 1 ;
                            TOGO [ TOGO_PTR ] [ 1 ] = current [ 1 ] ;
                            TOGO_PTR = TOGO_PTR + 1 ;
                        }
                        next [ 0 ] = TOGO [ TOGO_PTR - 1 ] [ 0 ] ;  // Pop
                        next [ 1 ] = TOGO [ TOGO_PTR - 1 ] [ 1 ] ;  // Pop
                        TOGO_PTR = TOGO_PTR - 1 ;  // Decrement stack pointer
                    } else if ( going == - 1 ) {  // ELSE backtrack
                        bool break ;
                        break = false ;

                        while ( ! break ) {
                            if ( PATH [ PATH_PTR - 1 ] == 0 )
                                rover . move down 1 ;
                            else if ( PATH [ PATH_PTR - 1 ] == 1 )
                                rover . move left 1 ;
                            else if ( PATH [ PATH_PTR - 1 ] == 2 )
                                rover . move up 1 ;
                            else if ( PATH [ PATH_PTR - 1 ] == 3 )
                                rover . move right 1 ;

                            PATH_PTR = PATH_PTR - 1 ;
                            current [ 0 ] = rover . x_pos ; current [ 1 ] = rover . y_pos ;
                            print "BACKTRACKING" ;
                            rover . print_map ;

                            if ( next [ 0 ] == current [ 0 ] && next [ 1 ] == current [ 1 ] - 1 )
                                break = true ;  // Up
                            if ( next [ 0 ] == current [ 0 ] && next [ 1 ] == current [ 1 ] + 1 )
                                break = true ;  // Down
                            if ( next [ 0 ] == current [ 0 ] - 1 && next [ 1 ] == current [ 1 ] )
                                break = true ;  // Left
                            if ( next [ 0 ] == current [ 0 ] + 1 && next [ 1 ] == current [ 1 ] )
                                break = true ;  // Right
                        }
                    } else {  //  Next was visited
                        next [ 0 ] = TOGO [ TOGO_PTR - 1 ] [ 0 ] ;  // Pop
                        next [ 1 ] = TOGO [ TOGO_PTR - 1 ] [ 1 ] ;  // Pop
                        TOGO_PTR = TOGO_PTR - 1 ;  // Decrement stack pointer
                    }

                    if ( current [ 0 ] == goal [ 0 ] && current [ 1 ] == goal [ 1 ] )
                        break = true ;
                }

                print "REACHED GOAL" ;
                if ( must_charge ) {
                    rover . recharge ;
                    times_charged = times_charged + 1 ;
                    must_charge = false ;
                } else {
                    rover . scan ;
                    rover . drill ;
                }
            }
        }
        if ( rover . power < 10 && times_charged == 2 )
            continue = true ;  // Used all charging tiles
        else if ( rover . power < 10 ) {
            must_charge = true ;
        } else {
            i = i + 1 ;
        }
        if ( rover . sonar == 0 ) continue = true ;
    }

    rover . build ;
    rover . print_inventory ;

    {
        int d_tiles ;
        d_tiles = rover . sonar ;
        if ( d_tiles == 0 ) {
            print "Collected every 'd' tiles on the map" ;
        } else {
            print "Failed to collect every 'd' tiles on the map" ;
        }
    }
}
